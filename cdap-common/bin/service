#!/usr/bin/env bash

# Copyright Â© 2014-2016 Cask Data, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.




# Set JAVA_HEAPMAX from variable defined in JAVA_HEAP_VAR, unless defined already
JAVA_HEAPMAX=${JAVA_HEAPMAX:-${!JAVA_HEAP_VAR}}
export JAVA_HEAPMAX


# Start a Java application from class name with arguments in the background
_start_java() {
  cdap_check_before_start || exit 0
  # Check and set classpath if in development environment. 
  cdap_check_and_set_classpath_for_dev_environment "${CDAP_HOME}"
  # Setup classpaths.
  cdap_set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
  # Setup Java
  cdap_set_java || exit 1
  local __defines="-Dcdap.service=${APP} ${JAVA_HEAPMAX} -Duser.dir=${LOCAL_DIR} -Djava.io.tmpdir=${TEMP_DIR}"
  if [ "${PKGNAME}" == "master" ]; then
    # Determine SPARK_HOME
    cdap_set_spark || logecho "Could not determine SPARK_HOME! Spark support unavailable!"
    # Master requires setting hive classpath
    cdap_set_hive_classpath || exit 1
    local __explore="-Dexplore.conf.files=${EXPLORE_CONF_FILES} -Dexplore.classpath=${EXPLORE_CLASSPATH}"
    __defines+=" ${__explore}"
    # Add proper HBase compatibility to CLASSPATH
    cdap_set_hbase || exit 1
    # Master requires this local directory
    cdap_check_or_create_master_local_dir || die "Could not create Master local directory"
    # Check for JAVA_LIBRARY_PATH
    if [ -n "${JAVA_LIBRARY_PATH}" ]; then
      __defines+=" -Djava.library.path=${JAVA_LIBRARY_PATH}"
    fi
    logecho "Running startup checks -- this may take a few minutes"
    "${JAVA}" ${JAVA_HEAPMAX} ${__explore} ${OPTS} -cp ${CLASSPATH} co.cask.cdap.master.startup.MasterStartupTool </dev/null >>${loglog} 2>&1
    if [ $? -ne 0 ]; then
      die "Master startup checks failed. Please check ${loglog} to address issues."
    fi
  fi
  cdap_create_pid_dir || die "Could not create PID dir: ${PID_DIR}"
  logecho "$(date) Starting Java ${APP} service on ${HOSTNAME}"
  "${JAVA}" -version 2>>${loglog}
  ulimit -a >>${loglog}
  echo "CLASSPATH=${CLASSPATH}" >>${loglog}
  __defines+=" ${OPTS}"
  echo "Running: ${JAVA} ${__defines} -cp ${CLASSPATH} ${MAIN_CLASS} ${MAIN_CLASS_ARGS} ${@}" >>${loglog}
  # Start our JVM
  nohup nice -n ${NICENESS} "${JAVA}" ${__defines} -cp ${CLASSPATH} ${MAIN_CLASS} ${MAIN_CLASS_ARGS} ${@} </dev/null >>${loglog} 2>&1 &
  echo $! >${pid}
  # Now, wait for JVM spinup
  sleep 2
  kill -0 $(<${pid}) >/dev/null 2>&1
  return $?
}

start() {
  if [ ${MAIN_CMD} ]; then
    _start_bin || die "Failed to start ${APP} service"
  elif [ ${MAIN_CLASS} ]; then
    _start_java || die "Failed to start Java ${APP} service"
  else
    die "Neither MAIN_CLASS or MAIN_CMD are set.  Please set one in ${CDAP_CONF}/cdap-env.sh"
  fi
}

stop() {
  if [ -f ${pid} ]; then
    pidToKill=$(<${pid})
    # kill -0 == see if the PID exists
    if kill -0 ${pidToKill} > /dev/null 2>&1; then
      echo -n "Stopping ${APP}"
      echo "$(date) Stopping ${APP}" >>${loglog}
      kill ${pidToKill} > /dev/null 2>&1
      # TODO: infinite loops are bad, mm'kay?
      while kill -0 ${pidToKill} > /dev/null 2>&1; do
        echo -n "."
        sleep 1
      done
      echo
    else
      retval=$?
      echo "Nothing to stop because kill -0 of pid ${pidToKill} failed with status ${retval}"
    fi
    rm -f $pid
  else
    echo "Nothing to stop because no pid file ${pid}"
  fi
}

restart() {
  stop
  start
}

_status() {
  case ${PLATFORM} in
    RHEL)
      rh_status > /dev/null 2>&1
      retval=$?
    ;;
    UBUNTU)
      ub_status > /dev/null 2>&1
      retval=$?
    ;;
  esac
  return ${retval}
}

rh_status() {
  echo "Checking status"
  # call sourced status function
  status -p ${pid}
}

ub_status() {
  echo "Checking status"
  # call sourced status function
  status_of_proc -p ${pid} ${0} ${APP}
}

# Executes a specific class' main method with the classpath and environment setup
run() {
  RUN_CLASS=${1}
  shift
  if [ -z "${RUN_CLASS}" ]; then
    echo "Error: No classname given!"
    die "Usage: ${0} run <fully qualified classname> [arguments]"
  fi

  # TODO: why can't we use _start_java and pass arguments?

  # Check and set classpath if in development environment. 
  cdap_check_and_set_classpath_for_dev_environment "${CDAP_HOME}"
  # Setup classpaths.
  cdap_set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
  # Setup Java
  cdap_set_java || exit 1
  cdap_set_spark || logecho "Could not determine SPARK_HOME! Spark support unavailable!"
  cdap_set_hive_classpath || exit 1
  # Add proper HBase compatibility to CLASSPATH
  cdap_set_hbase || exit 1
  # Master requires this local directory
  if [ "${PKGNAME}" == "master" ]; then
    cdap_check_or_create_master_local_dir || die "Could not create Master local directory"
  fi

  if [ ${#@} -ne 0 ]; then
    echo "Running class ${RUN_CLASS} with arguments: ${@}"
  else
    echo "Running class ${RUN_CLASS}"
  fi
  "${JAVA}" ${JAVA_HEAPMAX} -Dhive.classpath=${HIVE_CLASSPATH} -Duser.dir=${LOCAL_DIR} -Djava.io.tmpdir=${TEMP_DIR} ${OPTS} -cp ${CLASSPATH} ${RUN_CLASS} ${@}
}

case ${1} in
  start|stop|restart) ${1} ;;
  status)
    _status
    statuscode=$?
    if [ ${statuscode} -eq 0 ]; then
      echo "CDAP ${APP} ($(<${pid})) is running"
    else
      echo "CDAP ${APP} is stopped"
      exit $statuscode
    fi
    ;;
  condrestart) _status && restart ;;  
  run) shift; run ${@} ;;
  classpath)
    cdap_set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
    cdap_set_java || exit 1
    cdap_set_hbase || exit 1
    echo "${CLASSPATH}"
  ;;

  *) die "Usage: $0 {start|stop|restart|status|condrestart|run}" ;;
esac
exit $? 
